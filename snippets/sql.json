{
  "sqlc: Select One": {
    "prefix": "sqlcone",
    "body": [
      "-- name: ${1:GetUser} :one",
      "SELECT * FROM ${2:users}",
      "WHERE id = $1;"
    ],
    "description": "Get single row by ID"
  },
  "sqlc: Select Many": {
    "prefix": "sqlcmany",
    "body": [
      "-- name: ${1:ListUsers} :many",
      "SELECT * FROM ${2:users}",
      "WHERE created_at > $1",
      "ORDER BY ${3:created_at} DESC",
      "LIMIT $2 OFFSET $3;"
    ],
    "description": "Get paginated results"
  },
  "sqlc: Insert Returning": {
    "prefix": "sqlcinsert",
    "body": [
      "-- name: ${1:CreateUser} :one",
      "INSERT INTO ${2:users} (",
      "\t${3:name}, ${4:email}, ${5:password_hash}",
      ") VALUES (",
      "\t$1, $2, $3",
      ")",
      "RETURNING id, created_at;"
    ],
    "description": "Insert with returning columns"
  },
  "sqlc: Update Exec": {
    "prefix": "sqlcupdate",
    "body": [
      "-- name: ${1:UpdateUser} :exec",
      "UPDATE ${2:users}",
      "SET name = $1, email = $2, updated_at = NOW()",
      "WHERE id = $3;"
    ],
    "description": "Update record"
  },
  "sqlc: Delete Exec": {
    "prefix": "sqlcdelete",
    "body": [
      "-- name: ${1:DeleteUser} :exec",
      "DELETE FROM ${2:users}",
      "WHERE id = $1;"
    ],
    "description": "Delete record"
  },
  "sqlc: Batch Insert": {
    "prefix": "sqlcbatch",
    "body": [
      "-- name: ${1:BulkCreateUsers} :batchexec",
      "INSERT INTO ${2:users} (name, email)",
      "VALUES (",
      "\t$1, $2",
      ");"
    ],
    "description": "Batch insert operation"
  },
  "sqlc: Join with Aggregation": {
    "prefix": "sqlcjoin",
    "body": [
      "-- name: ${1:UserWithOrders} :many",
      "SELECT",
      "\tu.id,",
      "\tu.name,",
      "\tCOUNT(o.id) AS order_count,",
      "\tSUM(o.amount) AS total_amount",
      "FROM ${2:users} u",
      "LEFT JOIN ${3:orders} o ON u.id = o.user_id",
      "GROUP BY u.id;"
    ],
    "description": "Join with aggregation"
  },
  "sqlc: JSONB Query": {
    "prefix": "sqlcjson",
    "body": [
      "-- name: ${1:SearchMetadata} :many",
      "SELECT * FROM ${2:users}",
      "WHERE metadata @> $1::jsonb;"
    ],
    "description": "Query JSONB field"
  },
  "sqlc: Array Contains": {
    "prefix": "sqlcarray",
    "body": [
      "-- name: ${1:FindByTags} :many",
      "SELECT * FROM ${2:posts}",
      "WHERE $1::text = ANY(tags);"
    ],
    "description": "Query array column"
  },
  "sqlc: Full Text Search": {
    "prefix": "sqlcfts",
    "body": [
      "-- name: ${1:SearchContent} :many",
      "SELECT * FROM ${2:documents}",
      "WHERE search_vector @@ websearch_to_tsquery('english', $1);"
    ],
    "description": "Full-text search query"
  },
  "sqlc: Transaction": {
    "prefix": "sqlctx",
    "body": [
      "-- name: ${1:TransferFunds} :exec",
      "BEGIN;",
      "",
      "UPDATE accounts",
      "SET balance = balance - $1",
      "WHERE id = $2;",
      "",
      "UPDATE accounts",
      "SET balance = balance + $1",
      "WHERE id = $3;",
      "",
      "INSERT INTO transfers (from_account, to_account, amount)",
      "VALUES ($2, $3, $1);",
      "",
      "COMMIT;"
    ],
    "description": "Transaction block"
  },
  "PG: Create Table": {
    "prefix": "pgtbl",
    "body": [
      "CREATE TABLE ${1:table_name} (",
      "\tid ${2|uuid,serial,bigserial|} PRIMARY KEY ${3|DEFAULT uuid_generate_v4(),DEFAULT gen_random_uuid(),|},",
      "\tcreated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),",
      "\tupdated_at TIMESTAMPTZ,",
      "\t${4:column} ${5|text,varchar(255),int,bigint,bool,jsonb,timestamptz|} ${6|NOT NULL,NULL|},$0",
      ");",
      "",
      "COMMENT ON TABLE ${1:table_name} IS '${7:Table description}';"
    ],
    "description": "Create table with audit columns"
  },
  "PG: Create Index": {
    "prefix": "pgidx",
    "body": "CREATE INDEX ${1:concurrently|} ${2:idx_name} ON ${3:table_name} (${4:column});",
    "description": "Create index"
  },
  "PG: Create Enum": {
    "prefix": "pgenum",
    "body": [
      "CREATE TYPE ${1:status} AS ENUM (",
      "\t'${2:active}',",
      "\t'${3:pending}',",
      "\t'${4:deleted}'",
      ");"
    ],
    "description": "Create enum type"
  },
  "PG: Create Function": {
    "prefix": "pgfunc",
    "body": [
      "CREATE OR REPLACE FUNCTION ${1:function_name}(${2:param} ${3:type})",
      "RETURNS ${4:return_type} AS $$",
      "BEGIN",
      "\t${0:-- function logic}",
      "END;",
      "$$ LANGUAGE plpgsql;"
    ],
    "description": "Create PL/pgSQL function"
  },
  "PG: Update Trigger": {
    "prefix": "pgtrigger",
    "body": [
      "CREATE OR REPLACE FUNCTION update_modified()",
      "RETURNS TRIGGER AS $$",
      "BEGIN",
      "\tNEW.updated_at = NOW();",
      "\tRETURN NEW;",
      "END;",
      "$$ LANGUAGE plpgsql;",
      "",
      "CREATE TRIGGER trg_${1:table_name}_update",
      "\tBEFORE UPDATE ON ${1:table_name}",
      "\tFOR EACH ROW",
      "\tEXECUTE FUNCTION update_modified();"
    ],
    "description": "Auto-update timestamp trigger"
  },
  "PG: CTE (With Clause)": {
    "prefix": "pgcte",
    "body": [
      "WITH ${1:cte_name} AS (",
      "\tSELECT ${2:columns}",
      "\tFROM ${3:table}",
      "\tWHERE ${4:condition}",
      ")",
      "SELECT * FROM ${1:cte_name};"
    ],
    "description": "Common Table Expression"
  },
  "PG: JSONB Column": {
    "prefix": "pgjsonb",
    "body": "${1:metadata} JSONB NOT NULL DEFAULT '{}'::jsonb",
    "description": "JSONB column with default"
  },
  "PG: Array Column": {
    "prefix": "pgarray",
    "body": "${1:tags} TEXT[] NOT NULL DEFAULT '{}'",
    "description": "Text array column"
  },
  "PG: Full-Text Search Setup": {
    "prefix": "pgfts",
    "body": [
      "ALTER TABLE ${1:table_name} ADD COLUMN ${2:search_vector} TSVECTOR;",
      "",
      "CREATE FUNCTION ${1:table_name}_search_update() RETURNS trigger AS $$",
      "BEGIN",
      "\tNEW.${2:search_vector} = ",
      "\t\tto_tsvector('english', ",
      "\t\t\tCOALESCE(NEW.${3:title}, '') || ' ' || ",
      "\t\t\tCOALESCE(NEW.${4:content}, '')",
      "\t\t);",
      "\tRETURN NEW;",
      "END;",
      "$$ LANGUAGE plpgsql;",
      "",
      "CREATE TRIGGER ${1:table_name}_search_trigger",
      "\tBEFORE INSERT OR UPDATE ON ${1:table_name}",
      "\tFOR EACH ROW",
      "\tEXECUTE FUNCTION ${1:table_name}_search_update();",
      "",
      "CREATE INDEX idx_${1:table_name}_search ON ${1:table_name} USING GIN (${2:search_vector});"
    ],
    "description": "Full-text search setup"
  },
  "PG: Generate UUID": {
    "prefix": "pguuid",
    "body": "gen_random_uuid()",
    "description": "Generate UUID v4"
  },
  "sqlc: Model Comment": {
    "prefix": "sqlcmodel",
    "body": [
      "COMMENT ON TABLE ${1:table_name} IS '${2:Description for sqlc model}';",
      "COMMENT ON COLUMN ${1:table_name}.id IS 'Primary key';",
      "COMMENT ON COLUMN ${1:table_name}.created_at IS 'Creation timestamp';"
    ],
    "description": "Add comments for sqlc model"
  },
  "Explain Analyze": {
    "prefix": "pgexplain",
    "body": "EXPLAIN (ANALYZE, BUFFERS) ${0:query};",
    "description": "Explain query with analyze"
  },
  "Current Timestamp": {
    "prefix": "pgnow",
    "body": "NOW()",
    "description": "Current timestamp"
  },
  "Interval": {
    "prefix": "pginterval",
    "body": "INTERVAL '${1:1} ${2|day,week,month,year|}'",
    "description": "Time interval"
  },
  "JSONB Build": {
    "prefix": "pgjsonbuild",
    "body": "jsonb_build_object(${1:'key', $2})",
    "description": "Build JSONB object"
  },
  "Array Aggregation": {
    "prefix": "pgarrayagg",
    "body": "ARRAY_AGG(${1:column})",
    "description": "Aggregate to array"
  },
  "sqlc v2: Named Parameters": {
    "prefix": "sqlcv2",
    "body": [
      "/* name: ${1:UpdateUser} :exec */",
      "UPDATE users",
      "SET",
      "\tname = @name,",
      "\temail = @email,",
      "\tupdated_at = NOW()",
      "WHERE id = @id;"
    ],
    "description": "sqlc v2 named parameters"
  },
  "sqlc v2: Batch Many": {
    "prefix": "sqlcv2batch",
    "body": [
      "/* name: ${1:BulkUpdateStatus} :batchmany */",
      "UPDATE users",
      "SET status = @status",
      "WHERE id = @id",
      "RETURNING *;"
    ],
    "description": "sqlc v2 batch with returning"
  },
  "sqlc v2: Custom Types": {
    "prefix": "sqlcv2type",
    "body": [
      "/* name: ${1:CreateUser} :one */",
      "INSERT INTO users (name, preferences)",
      "VALUES (",
      "\t@name,",
      "\t@preferences::jsonb",
      ")",
      "RETURNING *;"
    ],
    "description": "sqlc v2 with custom types"
  },
  "PG: Create Extension": {
    "prefix": "pgext",
    "body": "CREATE EXTENSION IF NOT EXISTS \"${1|uuid-ossp,pgcrypto,pg_trgm|}\";",
    "description": "Create PostgreSQL extension"
  },
  "PG: Add Column": {
    "prefix": "pgaddcol",
    "body": "ALTER TABLE ${1:table_name} ADD COLUMN ${2:column_name} ${3:data_type};",
    "description": "Add column to table"
  },
  "PG: Drop Column": {
    "prefix": "pgdropcol",
    "body": "ALTER TABLE ${1:table_name} DROP COLUMN ${2:column_name};",
    "description": "Drop column from table"
  },
  "PG: Row Level Security": {
    "prefix": "pgrls",
    "body": [
      "ALTER TABLE ${1:table_name} ENABLE ROW LEVEL SECURITY;",
      "",
      "CREATE POLICY ${2:policy_name} ON ${1:table_name}",
      "\tFOR SELECT",
      "\tUSING (${3:user_id} = current_user_id());"
    ],
    "description": "Row Level Security policy"
  },
  "PG: Grant Permissions": {
    "prefix": "pggrant",
    "body": "GRANT ${1|SELECT,INSERT,UPDATE,DELETE|} ON ${2:table_name} TO ${3:role_name};",
    "description": "Grant table permissions"
  },
  "PG: Index on Expression": {
    "prefix": "pgexpridx",
    "body": "CREATE INDEX ${1:idx_name} ON ${2:table_name} (LOWER(${3:column}));",
    "description": "Create index on expression"
  },
  "PG: Partial Index": {
    "prefix": "pgpartialidx",
    "body": "CREATE INDEX ${1:idx_name} ON ${2:table_name} (${3:column}) WHERE ${4:condition};",
    "description": "Create partial index"
  },
  "PG: Begin Transaction": {
    "prefix": "pgbegin",
    "body": "BEGIN;\n\n${0:-- test queries}\n\nROLLBACK;",
    "description": "Test transaction block"
  },
  "PG: Explain Analyze": {
    "prefix": "pgexplain",
    "body": "EXPLAIN (ANALYZE, BUFFERS, VERBOSE) ${0:query};",
    "description": "Detailed query analysis"
  }
}
